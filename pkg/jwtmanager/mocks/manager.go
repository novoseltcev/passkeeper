// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination=mocks/manager.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jwtmanager "github.com/novoseltcev/passkeeper/pkg/jwtmanager"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockManager) GenerateToken(ctx context.Context, subject string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, subject)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockManagerMockRecorder) GenerateToken(ctx, subject any) *MockManagerGenerateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockManager)(nil).GenerateToken), ctx, subject)
	return &MockManagerGenerateTokenCall{Call: call}
}

// MockManagerGenerateTokenCall wrap *gomock.Call
type MockManagerGenerateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerGenerateTokenCall) Return(arg0 string, arg1 error) *MockManagerGenerateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerGenerateTokenCall) Do(f func(context.Context, string) (string, error)) *MockManagerGenerateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerGenerateTokenCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockManagerGenerateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParseToken mocks base method.
func (m *MockManager) ParseToken(ctx context.Context, tokenString string) (*jwtmanager.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, tokenString)
	ret0, _ := ret[0].(*jwtmanager.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockManagerMockRecorder) ParseToken(ctx, tokenString any) *MockManagerParseTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockManager)(nil).ParseToken), ctx, tokenString)
	return &MockManagerParseTokenCall{Call: call}
}

// MockManagerParseTokenCall wrap *gomock.Call
type MockManagerParseTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagerParseTokenCall) Return(arg0 *jwtmanager.Token, arg1 error) *MockManagerParseTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagerParseTokenCall) Do(f func(context.Context, string) (*jwtmanager.Token, error)) *MockManagerParseTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagerParseTokenCall) DoAndReturn(f func(context.Context, string) (*jwtmanager.Token, error)) *MockManagerParseTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
