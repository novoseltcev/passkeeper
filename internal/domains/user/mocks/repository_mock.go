// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/repository_mock.go -package=mocks -source=repository.go -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/novoseltcev/passkeeper/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockRepository) CreateAccount(ctx context.Context, data *models.User) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, data)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockRepositoryMockRecorder) CreateAccount(ctx, data any) *MockRepositoryCreateAccountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockRepository)(nil).CreateAccount), ctx, data)
	return &MockRepositoryCreateAccountCall{Call: call}
}

// MockRepositoryCreateAccountCall wrap *gomock.Call
type MockRepositoryCreateAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryCreateAccountCall) Return(arg0 models.UserID, arg1 error) *MockRepositoryCreateAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryCreateAccountCall) Do(f func(context.Context, *models.User) (models.UserID, error)) *MockRepositoryCreateAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryCreateAccountCall) DoAndReturn(f func(context.Context, *models.User) (models.UserID, error)) *MockRepositoryCreateAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id models.UserID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id any) *MockRepositoryGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
	return &MockRepositoryGetByIDCall{Call: call}
}

// MockRepositoryGetByIDCall wrap *gomock.Call
type MockRepositoryGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetByIDCall) Return(arg0 *models.User, arg1 error) *MockRepositoryGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetByIDCall) Do(f func(context.Context, models.UserID) (*models.User, error)) *MockRepositoryGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetByIDCall) DoAndReturn(f func(context.Context, models.UserID) (*models.User, error)) *MockRepositoryGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByLogin mocks base method.
func (m *MockRepository) GetByLogin(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockRepositoryMockRecorder) GetByLogin(ctx, login any) *MockRepositoryGetByLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockRepository)(nil).GetByLogin), ctx, login)
	return &MockRepositoryGetByLoginCall{Call: call}
}

// MockRepositoryGetByLoginCall wrap *gomock.Call
type MockRepositoryGetByLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetByLoginCall) Return(arg0 *models.User, arg1 error) *MockRepositoryGetByLoginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetByLoginCall) Do(f func(context.Context, string) (*models.User, error)) *MockRepositoryGetByLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetByLoginCall) DoAndReturn(f func(context.Context, string) (*models.User, error)) *MockRepositoryGetByLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
