// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/service_mocks.go -package=mocks -source=service.go -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	secrets "github.com/novoseltcev/passkeeper/internal/domains/secrets"
	models "github.com/novoseltcev/passkeeper/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockISecretData is a mock of ISecretData interface.
type MockISecretData struct {
	ctrl     *gomock.Controller
	recorder *MockISecretDataMockRecorder
	isgomock struct{}
}

// MockISecretDataMockRecorder is the mock recorder for MockISecretData.
type MockISecretDataMockRecorder struct {
	mock *MockISecretData
}

// NewMockISecretData creates a new mock instance.
func NewMockISecretData(ctrl *gomock.Controller) *MockISecretData {
	mock := &MockISecretData{ctrl: ctrl}
	mock.recorder = &MockISecretDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecretData) EXPECT() *MockISecretDataMockRecorder {
	return m.recorder
}

// SecretType mocks base method.
func (m *MockISecretData) SecretType() models.SecretType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretType")
	ret0, _ := ret[0].(models.SecretType)
	return ret0
}

// SecretType indicates an expected call of SecretType.
func (mr *MockISecretDataMockRecorder) SecretType() *MockISecretDataSecretTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretType", reflect.TypeOf((*MockISecretData)(nil).SecretType))
	return &MockISecretDataSecretTypeCall{Call: call}
}

// MockISecretDataSecretTypeCall wrap *gomock.Call
type MockISecretDataSecretTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISecretDataSecretTypeCall) Return(arg0 models.SecretType) *MockISecretDataSecretTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISecretDataSecretTypeCall) Do(f func() models.SecretType) *MockISecretDataSecretTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISecretDataSecretTypeCall) DoAndReturn(f func() models.SecretType) *MockISecretDataSecretTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ToString mocks base method.
func (m *MockISecretData) ToString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockISecretDataMockRecorder) ToString() *MockISecretDataToStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockISecretData)(nil).ToString))
	return &MockISecretDataToStringCall{Call: call}
}

// MockISecretDataToStringCall wrap *gomock.Call
type MockISecretDataToStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISecretDataToStringCall) Return(arg0 string) *MockISecretDataToStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISecretDataToStringCall) Do(f func() string) *MockISecretDataToStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISecretDataToStringCall) DoAndReturn(f func() string) *MockISecretDataToStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, ownerID models.UserID, secretKey, name string, data secrets.ISecretData) (models.SecretID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ownerID, secretKey, name, data)
	ret0, _ := ret[0].(models.SecretID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, ownerID, secretKey, name, data any) *MockServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, ownerID, secretKey, name, data)
	return &MockServiceCreateCall{Call: call}
}

// MockServiceCreateCall wrap *gomock.Call
type MockServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateCall) Return(arg0 models.SecretID, arg1 error) *MockServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateCall) Do(f func(context.Context, models.UserID, string, string, secrets.ISecretData) (models.SecretID, error)) *MockServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateCall) DoAndReturn(f func(context.Context, models.UserID, string, string, secrets.ISecretData) (models.SecretID, error)) *MockServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, id models.SecretID, ownerID models.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, id, ownerID any) *MockServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, id, ownerID)
	return &MockServiceDeleteCall{Call: call}
}

// MockServiceDeleteCall wrap *gomock.Call
type MockServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteCall) Return(arg0 error) *MockServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteCall) Do(f func(context.Context, models.SecretID, models.UserID) error) *MockServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteCall) DoAndReturn(f func(context.Context, models.SecretID, models.UserID) error) *MockServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, id models.SecretID, ownerID models.UserID) (*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, ownerID)
	ret0, _ := ret[0].(*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, id, ownerID any) *MockServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, id, ownerID)
	return &MockServiceGetCall{Call: call}
}

// MockServiceGetCall wrap *gomock.Call
type MockServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetCall) Return(arg0 *models.Secret, arg1 error) *MockServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetCall) Do(f func(context.Context, models.SecretID, models.UserID) (*models.Secret, error)) *MockServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetCall) DoAndReturn(f func(context.Context, models.SecretID, models.UserID) (*models.Secret, error)) *MockServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPage mocks base method.
func (m *MockService) GetPage(ctx context.Context, ownerID models.UserID, limit, offset uint64) (*secrets.Page[models.Secret], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", ctx, ownerID, limit, offset)
	ret0, _ := ret[0].(*secrets.Page[models.Secret])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockServiceMockRecorder) GetPage(ctx, ownerID, limit, offset any) *MockServiceGetPageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockService)(nil).GetPage), ctx, ownerID, limit, offset)
	return &MockServiceGetPageCall{Call: call}
}

// MockServiceGetPageCall wrap *gomock.Call
type MockServiceGetPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetPageCall) Return(arg0 *secrets.Page[models.Secret], arg1 error) *MockServiceGetPageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetPageCall) Do(f func(context.Context, models.UserID, uint64, uint64) (*secrets.Page[models.Secret], error)) *MockServiceGetPageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetPageCall) DoAndReturn(f func(context.Context, models.UserID, uint64, uint64) (*secrets.Page[models.Secret], error)) *MockServiceGetPageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, id models.SecretID, ownerID models.UserID, secretKey, name string, data secrets.ISecretData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, ownerID, secretKey, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, id, ownerID, secretKey, name, data any) *MockServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, id, ownerID, secretKey, name, data)
	return &MockServiceUpdateCall{Call: call}
}

// MockServiceUpdateCall wrap *gomock.Call
type MockServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateCall) Return(arg0 error) *MockServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateCall) Do(f func(context.Context, models.SecretID, models.UserID, string, string, secrets.ISecretData) error) *MockServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateCall) DoAndReturn(f func(context.Context, models.SecretID, models.UserID, string, string, secrets.ISecretData) error) *MockServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
	isgomock struct{}
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHasher) Hash(v string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherMockRecorder) Hash(v any) *MockHasherHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasher)(nil).Hash), v)
	return &MockHasherHashCall{Call: call}
}

// MockHasherHashCall wrap *gomock.Call
type MockHasherHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHasherHashCall) Return(arg0 []byte, arg1 error) *MockHasherHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHasherHashCall) Do(f func(string) ([]byte, error)) *MockHasherHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHasherHashCall) DoAndReturn(f func(string) ([]byte, error)) *MockHasherHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEncryptor is a mock of Encryptor interface.
type MockEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorMockRecorder
	isgomock struct{}
}

// MockEncryptorMockRecorder is the mock recorder for MockEncryptor.
type MockEncryptorMockRecorder struct {
	mock *MockEncryptor
}

// NewMockEncryptor creates a new mock instance.
func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {
	mock := &MockEncryptor{ctrl: ctrl}
	mock.recorder = &MockEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncryptor) Encrypt(v string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptorMockRecorder) Encrypt(v any) *MockEncryptorEncryptCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptor)(nil).Encrypt), v)
	return &MockEncryptorEncryptCall{Call: call}
}

// MockEncryptorEncryptCall wrap *gomock.Call
type MockEncryptorEncryptCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptorEncryptCall) Return(arg0 []byte, arg1 error) *MockEncryptorEncryptCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptorEncryptCall) Do(f func(string) ([]byte, error)) *MockEncryptorEncryptCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptorEncryptCall) DoAndReturn(f func(string) ([]byte, error)) *MockEncryptorEncryptCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEncryptorFactory is a mock of EncryptorFactory interface.
type MockEncryptorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorFactoryMockRecorder
	isgomock struct{}
}

// MockEncryptorFactoryMockRecorder is the mock recorder for MockEncryptorFactory.
type MockEncryptorFactoryMockRecorder struct {
	mock *MockEncryptorFactory
}

// NewMockEncryptorFactory creates a new mock instance.
func NewMockEncryptorFactory(ctrl *gomock.Controller) *MockEncryptorFactory {
	mock := &MockEncryptorFactory{ctrl: ctrl}
	mock.recorder = &MockEncryptorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptorFactory) EXPECT() *MockEncryptorFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEncryptorFactory) Create(secretKey string) secrets.Encryptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", secretKey)
	ret0, _ := ret[0].(secrets.Encryptor)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEncryptorFactoryMockRecorder) Create(secretKey any) *MockEncryptorFactoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEncryptorFactory)(nil).Create), secretKey)
	return &MockEncryptorFactoryCreateCall{Call: call}
}

// MockEncryptorFactoryCreateCall wrap *gomock.Call
type MockEncryptorFactoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptorFactoryCreateCall) Return(arg0 secrets.Encryptor) *MockEncryptorFactoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptorFactoryCreateCall) Do(f func(string) secrets.Encryptor) *MockEncryptorFactoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptorFactoryCreateCall) DoAndReturn(f func(string) secrets.Encryptor) *MockEncryptorFactoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
