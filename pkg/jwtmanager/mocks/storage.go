// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=mocks/storage.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	jwtmanager "github.com/novoseltcev/passkeeper/pkg/jwtmanager"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenStorager is a mock of TokenStorager interface.
type MockTokenStorager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoragerMockRecorder
	isgomock struct{}
}

// MockTokenStoragerMockRecorder is the mock recorder for MockTokenStorager.
type MockTokenStoragerMockRecorder struct {
	mock *MockTokenStorager
}

// NewMockTokenStorager creates a new mock instance.
func NewMockTokenStorager(ctrl *gomock.Controller) *MockTokenStorager {
	mock := &MockTokenStorager{ctrl: ctrl}
	mock.recorder = &MockTokenStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStorager) EXPECT() *MockTokenStoragerMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockTokenStorager) Load(id string) (*jwtmanager.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", id)
	ret0, _ := ret[0].(*jwtmanager.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockTokenStoragerMockRecorder) Load(id any) *MockTokenStoragerLoadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTokenStorager)(nil).Load), id)
	return &MockTokenStoragerLoadCall{Call: call}
}

// MockTokenStoragerLoadCall wrap *gomock.Call
type MockTokenStoragerLoadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenStoragerLoadCall) Return(arg0 *jwtmanager.Token, arg1 error) *MockTokenStoragerLoadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenStoragerLoadCall) Do(f func(string) (*jwtmanager.Token, error)) *MockTokenStoragerLoadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenStoragerLoadCall) DoAndReturn(f func(string) (*jwtmanager.Token, error)) *MockTokenStoragerLoadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Store mocks base method.
func (m *MockTokenStorager) Store(token jwtmanager.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockTokenStoragerMockRecorder) Store(token any) *MockTokenStoragerStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTokenStorager)(nil).Store), token)
	return &MockTokenStoragerStoreCall{Call: call}
}

// MockTokenStoragerStoreCall wrap *gomock.Call
type MockTokenStoragerStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenStoragerStoreCall) Return(arg0 error) *MockTokenStoragerStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenStoragerStoreCall) Do(f func(jwtmanager.Token) error) *MockTokenStoragerStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenStoragerStoreCall) DoAndReturn(f func(jwtmanager.Token) error) *MockTokenStoragerStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
